// ============================================================================
//
// Copyright (c) 2003-2014 Barco N.V.
//
// ============================================================================
//
// Filename:
//	...
//
// Description:
//	...
//
// Author(s):
//	...
//
// ============================================================================

#include <iostream>

#include "JBS.Main.h"

// ============================================================================

using namespace std;
using namespace JBS;
using namespace BFC;

// ============================================================================

int main( int argc, char *argv[] ) {

	MainPtr main = new Main;

	try {
		return main->doit( argc, ( const Char ** )argv );
	}
	catch ( Exception& e ) {
		cerr << e.what() << endl;
		return -1;
	}

}

// ============================================================================

#if 0

local_deps :	$(compile_temp_files)
	@cat < /dev/null > $(JBS_DEPS_FILE)
	@$(call mod_echo_gendepends,$(compile_final_sources))
	@TMP_INCS="$(foreach i,$(compile_incldirs),_I $(i))" ;\
	TMP_DEFS="$(foreach d,$(compile_defs),_D $(d))" ;\
	$(common_mkdep_bin) \
		$$TMP_INCS $$TMP_DEFS \
		$(compile_final_sources) \
		> $(JBS_DEPS_FILE)

defs :		defs_compute_local	\
		defs_propagate_upward

defs_compute_local :	do_in_subdirs_defs_compute_local	\
			defs_agglom_local

defs_agglom_local :	defs_local_cleanup			\
			local_defs				\
			defs_add_branches

defs_local_cleanup :
	@$(call mod_echo_gendefs,$(JBS_REL_DIR))
	@cat < /dev/null > $(JBS_DEFS_FILE)
ifeq "$(JBS_TOP_DIR)" "$(JBS_CUR_DIR)"
	@echo "///////////////////////////////////////////////////////////////////////////////" >> $(JBS_DEFS_FILE)
	@echo "/// File automatically generated by Makefile!!!"  >> $(JBS_DEFS_FILE)
	@echo "/// Do not edit! All changes would be lost!" >> $(JBS_DEFS_FILE)
	@echo "/// Created: $(shell date)" >> $(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> $(JBS_DEFS_FILE)
	@echo "" >> $(JBS_DEFS_FILE)
endif

defs_add_branches :
	@for d in $(subdirs_build); do \
		cat $$d/$(JBS_DEFS_FILE) >> $(JBS_DEFS_FILE); \
	done

defs_propagate_upward :
ifneq "$(JBS_TOP_DIR)" "$(JBS_CUR_DIR)"
	$(MAKE) _C .. defs_agglom_local
	$(MAKE) _C .. defs_propagate_upward
endif

///////////////////////////////////////////////////////////////////////////////
///
/// PACKS
///
/// To generate packages (sdk, rte, bin, src, ...)

packs :		mod_packs_entry_point

///////////////////////////////////////////////////////////////////////////////
///
/// TARBZ2
///
/// To create an archive of the current directory (and all its subdirectories).

tarbz2 :		distclean
	@(  curdir="$(notdir $(JBS_CUR_DIR))" && \
	    cd .. && \
	    tar cfj "$$curdir"_`date "+%Y.%m.%d_%H.%M.%S"`.tar.bz2 "$$curdir" \
	)

///////////////////////////////////////////////////////////////////////////////
///
/// Everything at once
///
/// On special request...

.PHONY : blabla blablabla yadayadayada

blabla :
	@(	cd $(JBS_TOP_DIR) && \
			$(MAKE) clean defs depend all \
	)

blablabla :
	@$(JBS_TOP_DIR)/JBS/Templates/blaifier.sh

yadayadayada :
	@echo "Me too."

// ============================================================================
// Make.target.dll
// ============================================================================

ifeq "$(target_type)" "dll"

local_defs :
	@cat < /dev/null > ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "///## $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_filename   := $(tmp_full_name_nover)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deptype    := dll" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_cxxdefs    := $(tmp_dll_export_name)=JBS_DLL_IMPORT $(target_cxxdefs)" >> ./$(JBS_DEFS_FILE)
//// only local source dirs!
	@echo "$(target_name)_incldirs   := $(foreach d,$(compile_final_incldirs),$(JBS_CUR_DIR)/$(d)) $(target_incldirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_linkdir    := $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibs    := $(target_libs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibdirs := $(target_libdirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_doxydir    := ./$(target_docdir)/$(target_doxydir)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deps       := $(target_deps)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_maj    = $(mod_vers_def_maj)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_med    = $(mod_vers_def_med)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_min    = $(mod_vers_def_min)" >> ./$(JBS_DEFS_FILE)

	@echo "" >> ./$(JBS_DEFS_FILE)

mod_packs_target_libs		:=	$(target_libs)
mod_packs_target_libdirs	:=	$(target_libdirs)
mod_packs_target_sources	:=	$(target_sources)
mod_packs_target_headers	:=	$(compile_final_headers)
mod_packs_target_cxxdefs	:=	$(tmp_dll_export_name)=JBS_DLL_IMPORT $(target_cxxdefs)
mod_packs_target_incldirs	:=	$(target_incldirs)
mod_packs_target_docdir		:=	$(target_docdir)

mod_packs_rte_filenames		:=	$(tmp_full_name_maj)
mod_packs_sdk_filenames		:=	$(tmp_full_name_maj)

ifeq "$(JBS_PLATFORM)" "WIN32"
mod_packs_sdk_filenames		+=	$(tmp_full_name_lib) \
					$(tmp_full_name_exp)
else
mod_packs_sdk_filenames		+=	$(tmp_full_name_nover)
endif

mod_packs_build_list		:=	src doc sdk rte

endif

// ============================================================================
// Make.target.exe
// ============================================================================

ifeq "$(target_type)" "exe"

.PHONY : wrapper_bat wrapper_sh

ifeq "$(JBS_PLATFORM)" "WIN32"
wrapper_var		:=	PATH
else
wrapper_var		:=	LD_LIBRARY_PATH
endif

wrapper_name_bat	:=	$(call mod_vers_append,$(target_name)).bat
wrapper_name_sh		:=	$(call mod_vers_append,$(target_name)).sh

wrapper_libdirs :=	$(foreach \
				d, \
				$(target_all_deps), \
				$(call mod_path_connect, \
					$(JBS_CUR_DIR),$(JBS_TOP_DIR),$($(d)_linkdir)))

wrapper_bat :
	@/// create Windows batch file...
	@echo "echo off" > $(wrapper_name_bat)
	@echo "if \"%PATH%\"==\"\" PATH=." >> $(wrapper_name_bat)
	@for i in $(wrapper_libdirs) ; do \
		ni="`cygpath _w $$i`" ; \
		echo "PATH=%PATH%;$$i" >> $(wrapper_name_bat) ; \
	done
	@echo "$(exe_name) %1 %2 %3 %4 %5 %6 %7 %8 %9" >> $(wrapper_name_bat)
	@echo "pause" >> $(wrapper_name_bat)
	@unix2dos $(wrapper_name_bat) 2> /dev/null
	@chmod 755 $(wrapper_name_bat)

wrapper_sh :
	@/// create Unix shell script...
	@echo "#!/bin/sh" > $(wrapper_name_sh)
	@echo "if [ \"x\$${$(wrapper_var)}\" = \"x\" ] ; then $(wrapper_var)=\".\" ; else $(wrapper_var)=\".\":\$${$(wrapper_var)} ; fi" >> $(wrapper_name_sh)
	@echo "DIRNAME=\"\`dirname \$$0\`\"" >> $(wrapper_name_sh)
	@for i in $(wrapper_libdirs) ; do \
		echo "$(wrapper_var)=\$${$(wrapper_var)}:\$${DIRNAME}/$$i" >> $(wrapper_name_sh) ; \
	done
	@echo "PROGNAME=\"\$$0\"" >> $(wrapper_name_sh)
	@echo "\$${PROGNAME%.sh}$(link_suffix_exe) \"\$$@\"" >> $(wrapper_name_sh)
	@chmod 755 $(wrapper_name_sh)

ifeq "$(JBS_PLATFORM)" "WIN32"
ifeq "$(target_debug)" "yes"


$(bsc_name) :		$(compile_temp_files) $(compile_sbr_files)
	@$(call mod_echo_gen_bsc,$@)
	@bscmake /n /nologo /o $@ $(compile_sbr_files)

endif
endif

ifeq "$(JBS_PLATFORM)" "LINUX"

STRIP			:=	strip

ifeq "$(target_stripped)" "yes"
ifneq "$(target_debug)" "yes"
	@$(call mod_echo_stripping_exe,$@)
	@$(STRIP) $@
endif
endif

CLEAN_FILES		+=	$(wrapper_name_sh)

endif

local_defs :
	@cat < /dev/null > ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "///## $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_maj    = $(mod_vers_def_maj)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_med    = $(mod_vers_def_med)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_min    = $(mod_vers_def_min)" >> ./$(JBS_DEFS_FILE)

	@echo "" >> ./$(JBS_DEFS_FILE)

ifeq "$(JBS_PLATFORM)" "WIN32"
mod_packs_bin_filenames		:=	$(exe_name) \
					$(wrapper_name_bat) \
					$(wrapper_name_sh)
endif

ifeq "$(JBS_PLATFORM)" "LINUX"
mod_packs_bin_filenames		:=	$(exe_name) \
					$(wrapper_name_sh)
endif

mod_packs_build_list		:=	src bin

endif

// ============================================================================
// Make.target.filter
// ============================================================================

ifeq "$(target_type)" "filter"

target_name		:=	$(strip $(target_name))
tmp_dll_export_name	:=	$(target_name)_DLL

ifeq "$(JBS_PLATFORM)" "WIN32"

/// For the .rc files...

compile_rc_files	:=	$(strip $(wildcard $(target_rcs)))
compile_res_files	:=	$(patsubst %.rc,%.res,$(compile_rc_files))

RSC_EXE=rc.exe
RSC_OPT=/l 0x409 /r /d "NDEBUG" /d "WIN32"

//	/d <def>	Define a symbol
//	/fo <name>	Rename .RES file
//	/l <value>	Default language ID (in hex)
//	/r		Emit .RES file

%.res : %.rc
	$(RSC_EXE) $(RSC_OPT) /fo $@ $<

compile_temp_files	+=	$(compile_res_files)
compile_final_objects	+=	$(compile_res_files)

compile_defs		+=	_USRDLL $(tmp_dll_export_name)=JBS_DLL_EXPORT	\
				INC_OLE2 _WIN32_WINNT=0x0400	\
				_MT _X86_=1 WINVER=0x0400 // STRICT
// compile_flags		:=	$(filter_out /Gd,$(compile_flags))
// compile_flags		+=	/Gz // /O2 /Ob0 /YX"streams.h" /FD

link_flags		+=	/dll /incremental:no /machine:I386	\
	/OPT:NOREF /OPT:ICF /ignore:4089 /ignore:4078	\
	/stack:0x200000,0x200000 /nodefaultlib

tmp_full_name_nover	:=	$(link_prefix_dll)$(target_name)$(link_suffix_dll)
tmp_full_name_lib	:=	$(link_prefix_lib)$(target_name)$(link_suffix_lib)
tmp_full_name_exp	:=	$(target_name).exp
tmp_full_name_def	:=	$(target_name).def

$(tmp_full_name_nover) :	$(compile_temp_files)			\
				$(compile_final_objects)
	@$(call mod_echo_linking_lib,$(tmp_full_name_min))
	@"$(link_linker)"							\
		$(link_string)						\
		/out:"$(tmp_full_name_nover)" \
		/def:"$(tmp_full_name_def)"	\
		/implib:"$(tmp_full_name_lib)" \
		$(compile_final_objects)

CLEAN_FILES		+=	$(tmp_full_name_lib)			\
				$(tmp_full_name_exp)			\
				$(tmp_full_name_nover)			\
				$(compile_res_files)

local_target :		$(build_needed_libs)				\
			$(tmp_full_name_nover)

local_defs :

load :
	regsvr32.exe $(tmp_full_name_nover)

unload :
	regsvr32.exe /u $(tmp_full_name_nover)

endif

ifeq "$(JBS_PLATFORM)" "LINUX"

local_target :

local_defs :

endif

mod_packs_build_list		:=	src

endif

// ============================================================================
// Make.target.lib
// ============================================================================

ifeq "$(target_type)" "lib"

ifeq "$(JBS_PLATFORM)" "LINUX"

compile_defs		+=	$(dll_export_name)=JBS_DLL_NONE

AR 			:= 	ar
ARFLAGS			:= 	crv
RANLIB			:= 	ranlib

$(lib_full_name) :	$(compile_temp_files)				\
			$(compile_final_objects)
	@$(call mod_echo_linking_lib,$(lib_full_name))
	@$(AR) $(ARFLAGS) $@ $(compile_final_objects)
	@$(RANLIB) $@

endif

CLEAN_FILES		+=	$(lib_full_name)

.PHONY : $(target_name)

$(target_name) :	local_target

local_target :		$(build_needed_libs) $(lib_full_name)

local_defs :
	@cat < /dev/null > ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "///## $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_filename   := $(lib_full_name)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deptype    := lib" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_cxxdefs    := $(dll_export_name)= $(target_cxxdefs)" >> ./$(JBS_DEFS_FILE)
//// only local source dirs!
	@echo "$(target_name)_incldirs   := $(foreach d,$(compile_final_incldirs),$(JBS_CUR_DIR)/$(d)) $(target_incldirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_linkdir    := $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibs    := $(target_libs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibdirs := $(target_libdirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_doxydir    := ./$(target_docdir)/$(target_doxydir)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deps       := $(target_deps)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_maj    = $(mod_vers_def_maj)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_med    = $(mod_vers_def_med)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_min    = $(mod_vers_def_min)" >> ./$(JBS_DEFS_FILE)
	@echo "" >> ./$(JBS_DEFS_FILE)

mod_packs_target_linkname	:=	$(target_name)
mod_packs_target_libs		:=	$(target_libs)
mod_packs_target_libdirs	:=	$(target_libdirs)
mod_packs_target_sources	:=	$(target_sources)
mod_packs_target_headers	:=	$(compile_final_headers)
mod_packs_target_cxxdefs	:=	$(dll_export_name)= $(target_cxxdefs)
mod_packs_target_incldirs	:=	$(target_incldirs)
mod_packs_target_docdir		:=	$(target_docdir)

mod_packs_sdk_filenames		:=	$(lib_full_name)

/// We still DO NOT SUPPORT the sdk pack... This would involve adding a field
/// called for example 'target_oldtype' to the Make.target files.

mod_packs_build_list		:=	src doc

endif

// ============================================================================
// Make.target.none
// ============================================================================

ifeq "$(target_type)" "none"

local_target :

local_defs :

endif

// ============================================================================
// Make.target.plugin
// ============================================================================

ifeq "$(target_type)" "plugin"

tmp_short_name		:=	$(strip $(target_name))

///////////////////////////////////////////////////////////////////////////////
/// WIN32

ifeq "$(JBS_PLATFORM)" "WIN32"

compile_defs		+=	_USRDLL					\
				PLUGIN_VERSION_MAJ=$(target_ver_maj)	\
				PLUGIN_VERSION_MED=$(target_ver_med)	\
				PLUGIN_VERSION_MIN=$(target_ver_min)
link_flags		+=	/dll /incremental:no /machine:I386

tmp_full_name_dll	:=	$(tmp_short_name).dll
tmp_full_name_dll_maj	:=	$(tmp_short_name)_$(target_ver_maj).dll
tmp_full_name_dll_ver	:=	$(call mod_vers_append,$(tmp_short_name)).dll

tmp_full_name		:=	$(tmp_full_name_dll)

$(tmp_full_name_dll) :		$(compile_temp_files)			\
				$(compile_final_objects)
	@$(call mod_echo_linking_lib,$(tmp_full_name_dll_ver))
	@"$(link_linker)"							\
		$(link_string)						\
		/out:"$(tmp_full_name_dll_maj)"				\
		$(compile_final_objects)
	@$(call mod_utils_del_file,$@ $(tmp_full_name_dll_ver))
	@$(call mod_utils_copy_file,$(tmp_full_name_dll_maj),$@)
	@$(call mod_utils_copy_file,$(tmp_full_name_dll_maj),$(tmp_full_name_dll_ver))

CLEAN_FILES		+=	$(tmp_full_name_dll)			\
				$(tmp_full_name_dll_ver)		\
				$(tmp_full_name_dll_maj)

endif

ifeq "$(JBS_PLATFORM)" "LINUX"

compile_defs		+=	PLUGIN_VERSION_MAJ=$(target_ver_maj) \
				PLUGIN_VERSION_MED=$(target_ver_med) \
				PLUGIN_VERSION_MIN=$(target_ver_min)

tmp_full_name		:=	lib$(tmp_short_name).so
tmp_full_name_maj	:=	$(tmp_full_name).$(target_ver_maj)
tmp_full_name_med	:=	$(tmp_full_name_maj).$(target_ver_med)
tmp_full_name_min	:=	$(tmp_full_name_med).$(target_ver_min)

CLEAN_FILES		+=	$(tmp_full_name) \
				$(tmp_full_name_maj) \
				$(tmp_full_name_med) \
				$(tmp_full_name_min)

$(tmp_full_name_min) \
$(tmp_full_name_med) \
$(tmp_full_name_maj) \
$(tmp_full_name) :		$(compile_temp_files)			\
				$(compile_final_objects)
	@$(call mod_echo_linking_lib,$(tmp_full_name_min))
	@"$(link_linker)"							\
		_shared							\
		$(compile_final_objects)				\
		_Wl,_soname,$(tmp_full_name_maj)			\
		$(link_string)						\
		_o $(tmp_full_name_min)
	@$(call mod_utils_del_file,$(tmp_full_name_med) $(tmp_full_name_maj) $(tmp_full_name))
	@$(call mod_utils_link_file,$(tmp_full_name_min),$(tmp_full_name_med))
	@$(call mod_utils_link_file,$(tmp_full_name_med),$(tmp_full_name_maj))
	@$(call mod_utils_link_file,$(tmp_full_name_maj),$(tmp_full_name))

endif

local_target :		$(build_needed_libs) $(tmp_full_name)

local_defs :
	@cat < /dev/null > ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "///## $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_maj    = $(mod_vers_def_maj)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_med    = $(mod_vers_def_med)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_min    = $(mod_vers_def_min)" >> ./$(JBS_DEFS_FILE)

	@echo "" >> ./$(JBS_DEFS_FILE)

ifeq "$(JBS_PLATFORM)" "WIN32"
mod_packs_bin_filenames		:=	$(tmp_full_name_dll_maj)
endif

ifeq "$(JBS_PLATFORM)" "LINUX"
mod_packs_bin_filenames		:=	$(tmp_full_name_maj)
endif

mod_packs_build_list		:=	src bin

endif

// ============================================================================
// Make.target.rte
// ============================================================================

ifeq "$(target_type)" "rte"

target_name		:=	$(strip $(target_name))
tmp_dll_export_name	:=	$(target_name)_DLL

ifeq "$(JBS_PLATFORM)" "WIN32"

compile_defs		+=	_USRDLL $(tmp_dll_export_name)=JBS_DLL_EXPORT
link_flags		+=	/dll /incremental:no /machine:I386

tmp_full_name_nover	:=	$(link_prefix_dll)$(target_name)$(link_suffix_dll)

endif

ifeq "$(JBS_PLATFORM)" "LINUX"

compile_defs		+=	$(tmp_dll_export_name)=

tmp_full_name_nover	:=	$(link_prefix_dll)$(target_name)$(link_suffix_dll)

endif

local_target :		$(build_needed_libs)

local_defs :
	@cat < /dev/null > ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "///## $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_filename   := $(tmp_full_name_nover)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deptype    := dll" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_linkdir    := $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibs    := $(target_libs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibdirs := $(target_libdirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deps       := $(target_deps)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_maj    = $(mod_vers_def_maj)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_med    = $(mod_vers_def_med)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_min    = $(mod_vers_def_min)" >> ./$(JBS_DEFS_FILE)
	@echo "" >> ./$(JBS_DEFS_FILE)


mod_packs_build_list	:=

endif

// ============================================================================
// Make.target.sdk
// ============================================================================

ifeq "$(target_type)" "sdk"

target_name		:=	$(strip $(target_name))
tmp_dll_export_name	:=	$(target_name)_DLL

ifeq "$(JBS_PLATFORM)" "WIN32"

compile_defs		+=	_USRDLL $(tmp_dll_export_name)=JBS_DLL_EXPORT
link_flags		+=	/dll /incremental:no /machine:I386

tmp_full_name_nover	:=	$(link_prefix_dll)$(target_name)$(link_suffix_dll)
tmp_full_name_maj	:=	$(link_prefix_dll)$(target_name)_$(target_ver_maj)$(link_suffix_dll)
tmp_full_name_med	:=	$(link_prefix_dll)$(target_name)_$(target_ver_maj).$(target_ver_med)$(link_suffix_dll)
tmp_full_name_min	:=	$(link_prefix_dll)$(target_name)_$(target_ver_maj).$(target_ver_med).$(target_ver_min)$(link_suffix_dll)
tmp_full_name_lib	:=	$(link_prefix_lib)$(target_name)$(link_suffix_lib)

endif

ifeq "$(JBS_PLATFORM)" "LINUX"

compile_defs		+=	$(tmp_dll_export_name)=

tmp_full_name_nover	:=	$(link_prefix_dll)$(target_name)$(link_suffix_dll)
tmp_full_name_maj	:=	$(tmp_full_name_nover).$(target_ver_maj)
tmp_full_name_med	:=	$(tmp_full_name_maj).$(target_ver_med)
tmp_full_name_min	:=	$(tmp_full_name_med).$(target_ver_min)

endif

local_target :		$(build_needed_libs)

tmp_incldirs		:=	$(sort $(dir $(wildcard $(target_sources))))

local_defs :
	@cat < /dev/null > ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "///## $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "///////////////////////////////////////////////////////////////////////////////" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_filename   := $(tmp_full_name_nover)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deptype    := dll" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_cxxdefs    := $(target_cxxdefs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_incldirs   := $(foreach d,$(tmp_incldirs),$(JBS_CUR_DIR)/$(d)) $(target_incldirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_linkdir    := $(JBS_CUR_DIR)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibs    := $(target_libs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_addlibdirs := $(target_libdirs)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_deps       := $(target_deps)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_maj    = $(mod_vers_def_maj)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_med    = $(mod_vers_def_med)" >> ./$(JBS_DEFS_FILE)
	@echo "$(target_name)_ver_min    = $(mod_vers_def_min)" >> ./$(JBS_DEFS_FILE)
	@echo "" >> ./$(JBS_DEFS_FILE)

mod_packs_build_list	:=

endif

// ============================================================================
// Make.target.user
// ============================================================================

ifeq "$(target_type)" "user"

endif

// ============================================================================
// Make.module.packs
// ============================================================================

mod_packs_pack_cmd	:=	jpf_create

ifeq "$(JBS_PLATFORM)" "WIN32"
mod_packs_pack_platform	:=	win32
endif

ifeq "$(JBS_PLATFORM)" "LINUX"
mod_packs_pack_platform	:=	linux
endif

mod_packs_base_dir	:=	$(JBS_TOP_DIR)/Packs
mod_packs_pack_dir	:=	$(mod_packs_base_dir)/$(JBS_REL_DIR)

mod_packs_do_init :
	@[ _d $(mod_packs_base_dir) ] || mkdir $(mod_packs_base_dir)
	@[ _f $(mod_packs_base_dir)/$(JBS_NOENTER_FILE) ] || touch $(mod_packs_base_dir)/$(JBS_NOENTER_FILE)

ifeq "$(findstring bin,$(mod_packs_build_list))" "bin"

mod_packs_do_bin_pack :		local_target
	@$(call mod_echo_message,Creating BIN package for project '$(target_name)'!)
	@$(call mod_echo_message,... creating temp directory)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))
	@$(call mod_utils_make_dir,$(mod_packs_pack_dir))
	@$(call mod_echo_message,... copying runtime files)
	@$(call mod_utils_copy_file,$(mod_packs_bin_filenames),$(mod_packs_pack_dir))
	@cp Makefile $(mod_packs_pack_dir)/Makefile
	@$(call mod_echo_message,... archiving and compressing package!)
	@( cd $(mod_packs_base_dir) && \
	   $(mod_packs_pack_cmd) \
		_n $(target_name) \
		_v $(target_ver) \
		_p $(mod_packs_pack_platform) \
		_t bin \
		$(JBS_REL_DIR) \
	)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))

else

mod_packs_do_bin_pack :

endif

ifeq "$(findstring doc,$(mod_packs_build_list))" "doc"

ifneq "$(mod_packs_target_docdir)" ""

mod_packs_do_doc_pack :		doc
	@$(call mod_echo_message,Creating DOC package for project '$(target_name)'!)
	@$(call mod_echo_message,... creating temp directory)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))
	@$(call mod_utils_make_dir,$(mod_packs_pack_dir))
	@$(call mod_echo_message,... copying documentation)
	@$(call mod_utils_copy_dir,$(mod_packs_target_docdir),$(mod_packs_pack_dir))
	@$(call mod_echo_message,... archiving and compressing package!)
	@( cd $(mod_packs_base_dir) && \
	   $(mod_packs_pack_cmd) \
		_n $(target_name) \
		_v $(target_ver) \
		_t doc \
		$(JBS_REL_DIR) \
	)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))

else

mod_packs_do_doc_pack :

endif

else

mod_packs_do_doc_pack :

endif

ifeq "$(findstring rte,$(mod_packs_build_list))" "rte"

mod_packs_do_rte_pack :		local_target
	@$(call mod_echo_message,Creating RTE package for project '$(target_name)'!)
	@$(call mod_echo_message,... creating temp directory)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))
	@$(call mod_utils_make_dir,$(mod_packs_pack_dir))
	@if [ _r Make.target.rte ] ; \
	then \
		cp Make.target.rte $(mod_packs_pack_dir)/Make.target ; \
	else \
		$(call mod_echo_message,... creating pseudo Make.target) ; \
		echo "target_type     := rte" > $(mod_packs_pack_dir)/Make.target ; \
		echo "target_name     := $(target_name)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_ver_maj  := $(target_ver_maj)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_ver_med  := $(target_ver_med)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_ver_min  := $(target_ver_min)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_deps     := $(target_deps)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_libs     := $(mod_packs_target_libs)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_libdirs  := $(mod_packs_target_libdirs)" >> $(mod_packs_pack_dir)/Make.target ; \
	fi
	@cp Makefile $(mod_packs_pack_dir)/Makefile
	@$(call mod_echo_message,... copying runtime files)
	@$(call mod_utils_copy_file,$(mod_packs_rte_filenames),$(mod_packs_pack_dir))
	@$(call mod_echo_message,... archiving and compressing package!)
	@( cd $(mod_packs_base_dir) && \
	   $(mod_packs_pack_cmd) \
		_n $(target_name) \
		_v $(target_ver) \
		_p $(mod_packs_pack_platform) \
		_t rte \
		$(JBS_REL_DIR) \
	)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))

else

mod_packs_do_rte_pack :

endif

ifeq "$(findstring sdk,$(mod_packs_build_list))" "sdk"

mod_packs_do_sdk_pack :		local_target
	@$(call mod_echo_message,Creating SDK package for project '$(target_name)'!)
	@$(call mod_echo_message,... creating temp directory)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))
	@$(call mod_utils_make_dir,$(mod_packs_pack_dir))
	@if [ _r Make.target.sdk ] ; \
	then \
		cp Make.target.sdk $(mod_packs_pack_dir)/Make.target ; \
	else \
		$(call mod_echo_message,... creating pseudo Make.target) ; \
		echo "target_type     := sdk" > $(mod_packs_pack_dir)/Make.target ; \
		echo "target_name     := $(target_name)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_ver_maj  := $(target_ver_maj)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_ver_med  := $(target_ver_med)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_ver_min  := $(target_ver_min)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_sources  := $(mod_packs_target_headers)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_cxxdefs  := $(mod_packs_target_cxxdefs)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_deps     := $(target_deps)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_incldirs := $(mod_packs_target_incldirs)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_libs     := $(mod_packs_target_libs)" >> $(mod_packs_pack_dir)/Make.target ; \
		echo "target_libdirs  := $(mod_packs_target_libdirs)" >> $(mod_packs_pack_dir)/Make.target ; \
	fi
	@cp Makefile $(mod_packs_pack_dir)/Makefile
	@$(call mod_echo_message,... copying all headers)
	@cp __parents $(mod_packs_target_headers) $(mod_packs_pack_dir)
	@$(call mod_echo_message,... copying runtime files)
	@$(call mod_utils_copy_file,$(mod_packs_sdk_filenames),$(mod_packs_pack_dir))
	@for d in ` find $(mod_packs_pack_dir) _type d ` ; do if [ ! _r $${d}/Makefile ]; then touch $${d}/.jbs.noenter ; fi ; done
	@$(call mod_echo_message,... archiving and compressing package!)
	@( cd $(mod_packs_base_dir) && \
	   $(mod_packs_pack_cmd) \
		_n $(target_name) \
		_v $(target_ver) \
		_p $(mod_packs_pack_platform) \
		_t sdk \
		$(JBS_REL_DIR) \
	)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))

else

mod_packs_do_sdk_pack :

endif

ifeq "$(findstring src,$(mod_packs_build_list))" "src"

mod_packs_do_src_pack :		clean
	@$(call mod_echo_message,Creating SRC package for project '$(target_name)'!)
	@$(call mod_echo_message,... creating temp directory)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))
	@$(call mod_utils_make_dir,$(mod_packs_pack_dir))
	@$(call mod_echo_message,... copying tree)
	@cp _R * $(mod_packs_pack_dir)
	@$(call mod_echo_message,... archiving and compressing package!)
	@( cd $(mod_packs_base_dir) && \
	   $(mod_packs_pack_cmd) \
		_n $(target_name) \
		_v $(target_ver) \
		_t src \
		$(JBS_REL_DIR) \
	)
	@$(call mod_utils_del_dir,$(mod_packs_pack_dir))

else

mod_packs_do_src_pack :

endif

ifeq "$(findstring user,$(mod_packs_build_list))" "user"

mod_packs_do_user_pack :		local_packs

else

mod_packs_do_user_pack :

endif

mod_packs_do_recurs_% :
	$(MAKE) mod_packs_do_$*_pack
	$(MAKE) do_in_subdirs_mod_packs_do_recurs_$*

mod_packs_entry_point :							\
		mod_packs_do_init					\
		mod_packs_do_recurs_src					\
		mod_packs_do_recurs_doc					\
		mod_packs_do_recurs_sdk					\
		mod_packs_do_recurs_rte					\
		mod_packs_do_recurs_bin					\
		mod_packs_do_recurs_user

// ============================================================================
// Make.module.doc
// ============================================================================

DOXYTAGS_FILE		:=	.jbs.doxytags

ifeq "$(target_docdir)" ""

local_doc :

$(DOXY_GEN_TAGFILE) :
	@echo "///////////////////////////////////////////////////////#"
	@echo "///                  INTERNAL ERROR                  ///"
	@echo "/// DEPENDENCY NOT SETUP TO USE DOCUMENTATION AT ALL ///"
	@echo "///////////////////////////////////////////////////////#"
	@exit 2

else

ifeq "$(target_doxydir)" ""

local_doc :

$(DOXY_GEN_TAGFILE) :
	@echo "///////////////////////////////////////////"
	@echo "///           INTERNAL ERROR            ///"
	@echo "/// DEPENDENCY NOT SETUP TO USE DOXYGEN ///"
	@echo "///////////////////////////////////////////"
	@exit 1

else


mod_doc_doxydir		:=	$(target_docdir)/$(target_doxydir)
mod_doc_noenter		:=	$(mod_doc_doxydir)/$(JBS_NOENTER_FILE)
mod_doc_doxyconf	:=	$(mod_doc_doxydir)/DoxyConf
mod_doc_doxyconf_tmpl	:=	$(JBS_TOP_DIR)/JBS/Templates/DoxyConf.tmpl

mod_doc_needed_deps	:=	$(foreach \
					d, \
					$(target_all_deps), \
					$(if $($(d)_linkdir),$(d),))

DOXY_PROJECT_NAME	:=	$(target_name) Classes
DOXY_OUTPUT_DIRECTORY	:=	$(mod_doc_doxydir)
DOXY_INPUT		:=	$(compile_user_headers)
DOXY_IMAGE_PATH		:=	$(target_docdir)/$(target_doxyimg)
DOXY_TAGFILES		:=	\
	$(foreach \
		d, \
		$(mod_doc_needed_deps), \
		$(call mod_path_connect,
			$(JBS_CUR_DIR),
			$(JBS_TOP_DIR),
			$($(d)_linkdir))
		/$(DOXYTAGS_FILE)_$(d)
		=
		$(call mod_path_upto,
			$(JBS_CUR_DIR)/$(mod_doc_doxydir)/html,
			$(JBS_CUR_DIR))
		$(call mod_path_connect,
			$(JBS_CUR_DIR),
			$(JBS_TOP_DIR),
			$($(d)_linkdir))
		/$($(d)_doxydir)/html)

DOXY_GEN_TAGFILE	:=	$(DOXYTAGS_FILE)_$(target_name)

CLEAN_FILES		+=	$(DOXY_GEN_TAGFILE)
CLEAN_DIRS		+=	$(mod_doc_doxydir)

local_doc :		$(mod_doc_needed_deps) $(DOXY_GEN_TAGFILE)

$(DOXY_GEN_TAGFILE) :	$(compile_user_headers) \
			$(mod_doc_doxydir) \
			$(mod_doc_noenter) \
			$(mod_doc_doxyconf)
	@$(call mod_echo_bimsg,Generating Doxygen documentation for,$(target_name))
	@doxygen $(mod_doc_doxyconf)

$(mod_doc_doxydir) :
	@mkdir -p $@

$(mod_doc_noenter) :
	@touch $@

$(mod_doc_doxyconf) :	$(compile_user_headers) $(mod_doc_doxyconf_tmpl)
	@$(call mod_echo_bimsg,Generating Doxygen configuration file for,$(target_name))
	@sed \
		-e 's,@PROJECT_NAME@,$(DOXY_PROJECT_NAME),' \
		-e 's,@OUTPUT_DIRECTORY@,$(DOXY_OUTPUT_DIRECTORY),' \
		-e 's,@INPUT@,$(DOXY_INPUT),' \
		-e 's,@IMAGE_PATH@,$(DOXY_IMAGE_PATH),' \
		-e 's,@TAGFILES@,$(DOXY_TAGFILES),' \
		-e 's,@GENERATE_TAGFILE@,$(DOXY_GEN_TAGFILE),' \
		-e 's,@PREDEFINED_DLLS@,$(target_name)_DLL= $(foreach d,$(mod_doc_needed_deps),$(d)_DLL= ),' \
		$(mod_doc_doxyconf_tmpl) \
		> $(mod_doc_doxyconf)

.PHONY : $(mod_doc_needed_deps)

$(mod_doc_needed_deps) :
	@$(MAKE) _C $($@_linkdir) doc

endif

endif

// ============================================================================
// Make.module.debug
// ============================================================================

.PHONY : dumpvars

dumpvars :
	@$(foreach d,$(dumpable),					\
		echo _e "$(d) :\t[$($(d))]" ;				\
	)

// ============================================================================
// Make.module.clean
// ============================================================================

.PHONY : softclean clean distclean local_clean

softclean :	do_in_subdirs_softclean
	@$(call mod_utils_del_file,$(SOFTCLEAN_FILES))

clean :		do_in_subdirs_clean local_clean
	@$(call mod_utils_del_file,$(SOFTCLEAN_FILES))
	@$(call mod_utils_del_file,$(CLEAN_FILES))
ifneq "$(CLEAN_DIRS)" ""
	@$(call mod_utils_del_dir,$(CLEAN_DIRS))
endif

distclean :	do_in_subdirs_distclean local_clean
	@$(call mod_utils_del_file,$(SOFTCLEAN_FILES))
	@$(call mod_utils_del_file,$(CLEAN_FILES))
ifneq "$(CLEAN_DIRS)" ""
	@$(call mod_utils_del_dir,$(CLEAN_DIRS))
endif
	@$(call mod_utils_del_file,$(DISTCLEAN_FILES))

// ============================================================================
// Make.rules.instantiators
// ============================================================================

.PHONY : project class main

project :
	@$(JBS_TOP_DIR)/JBS/Templates/project_builder.sh

class :
	@$(JBS_TOP_DIR)/JBS/Templates/instantiator.sh

main :
	@echo "Making main .cpp file from template." ; \
	echo "File name (ex: TestCons): " ; \
	read filename ; \
	cp $(JBS_TOP_DIR)/JBS/Templates/signature.main $$filename.cpp

// ============================================================================

#endif

// ============================================================================
