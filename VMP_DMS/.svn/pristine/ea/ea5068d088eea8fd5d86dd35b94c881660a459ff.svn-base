// ============================================================================
//
// Copyright (c) 2003-2014 Barco N.V.
//
// ============================================================================
// 
// This file is part of "BFC".
// 
// "BFC" is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2.1 of the License, or
// (at your option) any later version.
// 
// "BFC" is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with "BFC"; if not, write to:
//                          Free Software Foundation
//                          59 Temple Place, Suite 330
//                          Boston, MA 02111-1307 USA
// 
// ============================================================================
//
// FileName:
//	BFC.DL.Descr.h
//
// Description:
//	...
//
// Author(s):
//	Jean-Francois GOBBERS
//
// ============================================================================

#ifndef _BFC_DL_Descr_H_
#define _BFC_DL_Descr_H_

// ============================================================================

#include "BFC.DL.DLL.h"

// ============================================================================

#include "BFC.DL.DescrPtr.h"

// ============================================================================

#include "BFC.Base.Buffer.h"
#include "BFC.Base.SObject.h"

#include "BFC.TL.Array.h"

// ============================================================================

namespace BFC {
namespace DL {

// ============================================================================

/// \brief A simple class description.
///
/// This class provides a simple description of the type of the objects
/// generated by a Factory.
///
/// Beside a description (short and long) of the purpose of this factory,
/// it records a version number and the name of the objects created by
/// this factory.
///
/// \ingroup BFC_DL

class BFC_DL_DLL Descr : virtual public SObject {

public :

	/// \brief Constructs an empty description.
	///
	/// Creates an empty description.

	Descr(
	) {
	}

	/// \brief Creates a new Plugin description.
	///
	/// Creates a new description and fills it up.
	///
	/// \param pName
	///	The type name of the objects this factory can instantiate.
	///
	/// \param pType
	///	The category of the objects this factory can instantiate.
	///
	/// \param pVers
	///	A user-defined version number.
	///
	/// \param pDesc
	///	A short description explaining the purpose of the objects
	///	created by this factory (max 1 line).

	Descr(
		const	Buffer &	pName,
		const	Buffer &	pType,
		const	Buffer &	pDesc
	) :
		name	( pName ),
		type	( pType ),
		desc	( pDesc )
	{
	}

	/// \brief Copy constructor.
	///
	/// This constructor builds a deep copy of another description
	/// \a pOther.

	Descr(
		const	Descr &		pOther
	) :
		SObject	(),
		name	( pOther.name ),
		type	( pOther.type ),
		desc	( pOther.desc )
	{
	}

	/// \brief Copy operator.

	Descr & operator = (
		const	Descr &		pOther
	) {
		if ( this != &pOther ) {
			name	= pOther.name;
			type	= pOther.type;
			desc	= pOther.desc;
		}
		return *this;
	}

	virtual DescrPtr clone(
	) const;

	const Buffer & getName(
	) const {
		return name;
	}

	const Buffer & getType(
	) const {
		return type;
	}

	const Buffer & getShort(
	) const {
		return desc;
	}

protected :

private :

	Buffer	name;
	Buffer	type;
	Buffer	desc;

};

// ============================================================================

typedef Array< DescrCPtr > DescrCArray;

// ============================================================================

} // namespace DL
} // namespace BFC

// ============================================================================

#endif // _BFC_DL_Descr_H_

// ============================================================================

