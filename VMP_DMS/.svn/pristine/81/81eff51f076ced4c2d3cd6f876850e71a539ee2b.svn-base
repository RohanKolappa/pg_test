// ============================================================================
// 
// Copyright (c) 2003-2014 Barco N.V.
// 
// ============================================================================
// 
// This file is part of "BFC".
// 
// "BFC" is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2.1 of the License, or
// (at your option) any later version.
// 
// "BFC" is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with "BFC"; if not, write to:
//                          Free Software Foundation
//                          59 Temple Place, Suite 330
//                          Boston, MA 02111-1307 USA
// 
// ============================================================================
// 
// Filename:
//	BFC.Crypto.CBC.cpp
// 
// Description:
//	...
// 
// Author(s):
//	Jean-Francois GOBBERS
// 
// ============================================================================

#include "BFC.Crypto.CBC.h"
#include "BFC.Crypto.CipherRepository.h"
#include "BFC.Crypto.ModeRegisterer.h"

// ============================================================================

using namespace BFC;

// ============================================================================

BFC_PTR_IMPL_NS( Crypto, CBC )

// ============================================================================

const DL::TypeCPtr & Crypto::CBC::getClassType() {

	static DL::TypeCPtr i = new DL::Type(
		UUId( "d1f41a6a-ffb3-433d-8c39-1c7991db6eb2" ),
		"BFC.Crypto.CBC",
		Crypto::Mode::getClassType(),
		new DL::Descr(
			"cbc",
			"Mode",
			"CBC Mode" ) );

	return i;

}

// ============================================================================

Crypto::CBC::CBC() :

	Mode( getClassType() ) {

}

// ============================================================================

void Crypto::CBC::init(
		CipherPtr	pCipher,
	const	Buffer &	pIV,
	const	Buffer &	pKey ) {

	cipher	= pCipher;
	blkSze	= pCipher->getBlockSize();

	cipher->setKey( pKey );

	if ( pIV.getLength() != blkSze ) {
		throw InvalidArgument( "Invalid IV!" );
	}

	IV = pIV;

}

void Crypto::CBC::done() {

	if ( ! cipher ) {
		throw NotInitialized();
	}

	cipher.kill();

}

// ============================================================================

Buffer Crypto::CBC::encrypt(
	const	Buffer &	pPlainText ) {

	if ( ! cipher ) {
		throw NotInitialized();
	}

	Uint32		len = pPlainText.getLength();

	if ( len % blkSze ) {
		throw InvalidArgument();
	}

	Buffer	ct;

	ct.resize( len );

	Buffer tmp;

	for ( Uint32 i = 0 ; i < len ; i += blkSze ) {
		IV ^= pPlainText( i, blkSze );
		cipher->encrypt( IV, tmp );
		ct.overwrite( i, tmp );
		IV = tmp;
	}

	return ct;

}

Buffer Crypto::CBC::decrypt(
	const	Buffer &	pCipherText ) {

	if ( ! cipher ) {
		throw NotInitialized();
	}

	Uint32	len = pCipherText.getLength();

	if ( len % blkSze ) {
		throw InvalidArgument();
	}

	Buffer	pt;

	pt.resize( len );

	for ( Uint32 i = 0 ; i < len ; i += blkSze ) {
		Buffer ctp = pCipherText( i, blkSze );
		pt.overwrite( i, IV ^ cipher->decrypt( ctp ) );
		IV = ctp;
	}

	return pt;

}

// ============================================================================

Buffer Crypto::CBC::getiv() const {

	if ( ! cipher ) {
		throw NotInitialized();
	}

	return IV;

}

void Crypto::CBC::setiv(
	const	Buffer &	pIV ) {

	if ( ! cipher ) {
		throw NotInitialized();
	}

	if ( pIV.getLength() != blkSze ) {
		throw InvalidArgument();
	}

	IV = pIV;

}

// ============================================================================

void Crypto::CBC::test() {

	static const struct {
		Uchar	key[ 32 ];
		Uint32	len;
		Uchar	iv[ 16 ];
		Uchar	pt[ 64 ];
		Uchar	ct[ 64 ];
	} tests[] = {
	{
		{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		},
		16,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		},
		{
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		},
		{
			0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
			0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
			0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
			0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7
		}
	},
	{
		{
			0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
		},
		24,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		},
		{
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		},
		{
			0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
			0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
			0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
			0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd
		}
	},
	{
		{
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
		},
		32,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		},
		{
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		},
		{
			0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
			0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
			0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
			0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b
		}
	}
	};

	CipherPtr cipher = CipherRepository::instance()
					->getFactoryFor( Buffer( "aes" ) )
					->makeObject();

	for ( Uint32 i = 0 ; i < ( Uint32 )( sizeof( tests ) / sizeof( tests[ 0 ] ) ) ; i++ ) {

		Buffer	key( tests[ i ].key, tests[ i ].len );
		Buffer	iv( tests[ i ].iv, 16 );
		Buffer	pt0( tests[ i ].pt, 64 );
		Buffer	ct0( tests[ i ].ct, 64 );

		init( cipher, iv, key );
		Buffer	ct1 = encrypt( pt0 );
		done();

		init( cipher, iv, key );
		Buffer	pt1 = decrypt( ct1 );
		done();

		if ( ct1 != ct0 ) {
			throw InternalError( "Can't encrypt!" );
		}
		if ( pt1 != pt0 ) {
			throw InternalError( "Can't decrypt! (loop "
				+ Buffer( i )
				+ ")" );
		}


	}

}

// ============================================================================

static Crypto::ModeRegisterer< Crypto::CBC > cbcRegisterer;

// ============================================================================

