<ipvs>
	<query type="UpdateQuery" name="status_exporting" priority="1" enable="false" db_server="sedna_native,sedna_xmldb,exist_xmldb">
	<![CDATA[ 
		(:
		default.mediastreamdirresourcelist.msdrl_8f68c839-cdb1-444d-bc49-6c64c9f53bb1
		:)
		declare variable $MediaDirNID :='PARAM_mediaStreamDirResourceNID' ;

		declare variable $ParentMediaDirNID := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..
											 where $b/Info/Properties/ParentMediaDirNID=$MediaDirNID 
											 or $b/@NID=$MediaDirNID return  data($b/@NID );
		update replace $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..[@NID=$ParentMediaDirNID]//State
		with
		<State>wait_export_complete</State>
		]]>
	</query>
	
	<query type="ExportQuery" name="export"  priority="2" enable="true" db_server="sedna_native,sedna_xmldb,exist_xmldb">
	<![CDATA[ 
	
		declare variable $param_mediaDirNID :='PARAM_mediaStreamDirResourceNID' ;
		declare variable $arr_parentMediaDirNID := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..
											 where $b/Info/Properties/ParentMediaDirNID=$param_mediaDirNID 
											 or $b/@NID=$param_mediaDirNID return  data($b/@NID );
		
		declare function local:getFileList_withinGroup( $parent as element()*) as element()* { 
		 let $fileList_withinGroup := ( 
					for $child in index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..
					where  data($child//MediaStoreFileInfo/MediaGroupID) = data($parent//MediaGroupID)  
					and  $child//MediaStoreFileInfo/Type!='MediaGroup'
					and $child//Info/Properties/ParentMediaDirNID = $arr_parentMediaDirNID
					return  <groupClip>{$child/@NID}</groupClip>
				) 
			 return $fileList_withinGroup 
		}; 
		declare function local:count_otherdir_clips_in_group( $parent as element()*) as xs:integer { 
			let $co :=   count ( index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..[
					//MediaStoreFileInfo/MediaGroupID = $parent/MediaGroupID  
					and  //MediaStoreFileInfo/Type != 'MediaGroup' 
					and   not ( //Info/Properties/ParentMediaDirNID = $arr_parentMediaDirNID )]/@NID
				)  
 
			 return 
			 if( $co=0 ) then
				0
			 else $co
		};		
		 
		 
		let $unique_media_group_ids := distinct-values ( for $b in
			index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..
			where $b[  Info/Properties[ParentMediaDirNID=$arr_parentMediaDirNID]  
			and not  ( Info/MediaStoreFileInfo/MediaGroupID=''  )   ] 
			return $b/Info/MediaStoreFileInfo/MediaGroupID )
		 
		let $fileClips := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..
			where $b[ Info/Properties[ParentMediaDirNID=$arr_parentMediaDirNID] and Info/MediaStoreFileInfo/MediaGroupID='']
			return 
			<fileClip>
			{$b/@NID}
			</fileClip>		

		let $fileGroupFiles := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..
			 
			where $b[ 
			( Info/MediaStoreFileInfo/Type='MediaGroup' and   Info/MediaStoreFileInfo/MediaGroupID=$unique_media_group_ids) ]   
			return 
			<fileGroup>
			{ 
			if ($b/Info/Properties/ParentMediaDirNID=$arr_parentMediaDirNID ) then $b/@NID  
			else if (($b/Info/Properties/ParentMediaDirNID ='' or $b/Info/Properties/ParentMediaDirNID ='NONE') and local:count_otherdir_clips_in_group($b) = 0 ) then $b/@NID  
			else if ( $b/Info/Properties/ParentMediaDirNID !=''  and $b/Info/Properties/ParentMediaDirNID != $arr_parentMediaDirNID )  then  ''
			else ''
			}
			{ local:getFileList_withinGroup($b) }
			{$b/Info/Properties/ParentMediaDirNID}
			{$b/Info/MediaStoreFileInfo/MediaGroupID}
			{$b/Info/MediaStoreFileInfo/Type}
			</fileGroup>
		 
		 
		
		let $allFileNIDS := for $b in distinct-values($fileClips/@NID | $fileGroupFiles/@NID | $fileGroupFiles/groupClip/@NID ) return data($b)
		
		
		
		
		let $dirs := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..
			where $b/Info/Properties/ParentMediaDirNID=$param_mediaDirNID 
			(: or $b/@NID=$param_mediaDirNID :) 
			return  <dir>{ $b/@NID  }</dir>
		
		let $bookmarks := for $b in index-scan('IPVSis_colnids_default', 'default.bookmarklist', 'EQ')/..
			where $b/MediaStreamFileResourceNID=$allFileNIDS 
			return  <bookmark>{ $b/@NID  }</bookmark>
		
		
		
		(: 
		let $result := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..[@NID=$allFileNIDS]  
			| index-scan('IPVSis_colnids_default', 'default.bookmarklist', 'EQ')/..[MediaStreamFileResourceNID=$allFileNIDS  ]
			| index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..[@NID=$arr_parentMediaDirNID  ]
		return data($b/@NID)
		let $docsList := <result>{$bookmarks}{$dirs}{$fileClips}{$fileGroupFiles} {$result }</result>
		return $docsList 
		:)
		
		for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamfileresourcelist', 'EQ')/..[@NID=$allFileNIDS]  
			| index-scan('IPVSis_colnids_default', 'default.bookmarklist', 'EQ')/..[MediaStreamFileResourceNID=$allFileNIDS  ]
			| index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..[Info/Properties/ParentMediaDirNID=$param_mediaDirNID]
		return  $b 
	]]>
		<query type="UpdateQuery" name="status_creating_zip" priority="1" enable="false" db_server="sedna_native,sedna_xmldb,exist_xmldb">
		<![CDATA[ 
			declare variable $MediaDirNID :='PARAM_mediaStreamDirResourceNID' ;
	
			declare variable $ParentMediaDirNID := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..
												 where $b/Info/Properties/ParentMediaDirNID=$MediaDirNID 
												 or $b/@NID=$MediaDirNID return  data($b/@NID );
			update replace $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..[@NID=$ParentMediaDirNID]//State
			with
			<State>wait_zip_complete</State>
			]]>
		</query>
		<query type="CreateZip" name="create_zip" priority="2" enable="true" db_server="sedna_native,sedna_xmldb,exist_xmldb"/>
		<query type="UpdateQuery" name="status_created_zip" priority="3" enable="false" db_server="sedna_native,sedna_xmldb,exist_xmldb">
		<![CDATA[ 
			declare variable $MediaDirNID :='PARAM_mediaStreamDirResourceNID' ;
	
			declare variable $ParentMediaDirNID := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..
												 where $b/Info/Properties/ParentMediaDirNID=$MediaDirNID 
												 or $b/@NID=$MediaDirNID return  data($b/@NID );
			update replace $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..[@NID=$ParentMediaDirNID]//State
			with
			<State>create_zip_complete</State>
			]]>
		</query>	
	</query>
	
	
	<query type="UpdateQuery" name="status_deleted" priority="3" enable="false" db_server="sedna_native,sedna_xmldb,exist_xmldb">
	<![CDATA[ 
		declare variable $MediaDirNID :='PARAM_mediaStreamDirResourceNID' ;

		declare variable $ParentMediaDirNID := for $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..
											 where $b/Info/Properties/ParentMediaDirNID=$MediaDirNID 
											 or $b/@NID=$MediaDirNID return  data($b/@NID );
		update replace $b in index-scan('IPVSis_colnids_default', 'default.mediastreamdirresourcelist', 'EQ')/..[@NID=$ParentMediaDirNID]//State
		with
		<State>wait_filetransfer_complete</State>
	
		]]>
	</query>
		
	
</ipvs>